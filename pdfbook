#!/usr/bin/env python3
#
# © Reuben Thomas <rrt@sc3d.org> 2022
# Released under the GPL version 3, or (at your option) any later version.

import os
import argparse
import re
import subprocess
import logging
import tempfile
import shutil

# Set up units
from units import unit, scaled_unit, quantity
import units.predefined
units.predefined.define_base_si_units()
inch = scaled_unit('inch', 'cm', 2.54)
mm = unit('mm')
point = scaled_unit('pt', 'inch', 1/72)
units = {
    'pt': point,
    'mm': mm,
    'inch': inch,
}

def unit_to_compact_str(u):
        return f'{u.num}{u.unit}'
quantity.Quantity.__str__ = unit_to_compact_str

# Command-line arguments
default_paper = subprocess.check_output(['paper', '--no-size']).decode().strip()
parser = argparse.ArgumentParser(
    description='Make a print-ready PDF of signatures from PDF of individual pages. The resulting file should be printed in "long-edge" duplex mode, unless --short-edge is given. Dimensions are in pt, mm or in, and the unit must be given, e.g. "14pt".',
)
parser.add_argument('-V', '--version', action='version',
                    version='%(prog)s 0.2 (03 Oct 2022) by Reuben Thomas <rrt@sc3d.org>')
parser.add_argument('-p', '--paper', metavar='PAPER-SIZE', default=default_paper,
                    help='output paper size [default is user default paper size, currently %(default)s]')
parser.add_argument('-s', '--signature', metavar='PAGES', type=int, default=0,
                    help='number of pages per signature [default %(default)s = all pages in one signature]')
parser.add_argument('--short-edge', action='store_true',
                  help='make the output suitable for short-edge duplex printing [default: long-edge]')
parser.add_argument('--verso-w-offset', metavar='DIMENSION', default='0pt',
                    help='width offset for verso pages [default %(default)s]')
parser.add_argument('--verso-h-offset', metavar='DIMENSION', default='0pt',
                    help='height offset for verso pages [default %(default)s]')
parser.add_argument('--debug', action='store_true',
                    help='print command run and keep temporary files')
parser.add_argument('input_file', metavar='INPUT',
                    help="input PDF file name")
parser.add_argument('input_page_width', metavar='INPUT-PAGE-WIDTH',
                    help="input page width")
parser.add_argument('output_file', metavar='OUTPUT',
                    help="output PDF file name")
args = parser.parse_args()

# Error messages
# FIXME: Use warnings, not logging
logging.basicConfig(format=f'{parser.prog}: %(message)s')
logger = logging.getLogger(__name__)
def warn(s): logger.warning(s)
def die(s): warn(s); exit(1)

def run(cmd):
    if args.debug:
        warn(f'running command: {" ".join(cmd)}')
    subprocess.check_call(cmd)

# Get output paper size
output_paper = args.paper
paper_info = subprocess.check_output(['paper', output_paper])

# Extract height, width and unit
matches = re.search(b': ([0-9]+)x([0-9]+) ([a-z]+)', paper_info)
paper_unit = units[matches.group(3).decode()]
paper_width = paper_unit(int(matches.group(1)))
paper_height = paper_unit(int(matches.group(2)))

# Calculate page width and height
page_width = paper_unit(paper_height) / 2
page_height = paper_unit(paper_width)

# Get dimensions
def str_to_dimension(s):
    matches = re.search('([0-9]+)([a-z]+)', s)
    return units[matches.group(2)](int(matches.group(1)))

input_page_width = str_to_dimension(args.input_page_width)
verso_w_offset = str_to_dimension(args.verso_w_offset)
verso_h_offset = str_to_dimension(args.verso_h_offset)

# Check input file exists
if not os.path.exists(args.input_file):
    die(f'input file `{args.input_file}\' does not exist')

# Create temporary directory
# We don't use tempfile.TemporaryDirectory so we can avoid deleting it if
# --debug is given.
tempdir = tempfile.mkdtemp()

# Get base name of input file, and make names of temporary files
(input_base, _) = os.path.splitext(args.input_file)
ps_file = os.path.join(tempdir, f'{input_base}.ps')
shifted_ps_file = os.path.join(tempdir, f'{input_base}-shifted.ps')
shifted_ps_signatures_file = os.path.join(tempdir, f'{input_base}-shifted-book.ps')
shifted_ps_signatures_2up_file = os.path.join(tempdir, f'{input_base}-shifted-book-2up.ps')
shifted_ps_signatures_duplex_file = os.path.join(tempdir ,f'{input_base}-shifted-book-duplex.ps')

# Convert PDF file to PostScript
run(['pdf2ps', args.input_file, ps_file])

# Shift even pages by paper width — page width
even_page_shift = page_width - input_page_width
run(['pstops',
     f'--inpaper={page_width}x{page_height}',
     f'2:0,1({even_page_shift},0mm)',
     ps_file,
     shifted_ps_file,
])

# Reorder pages into signature orders
run(['psbook',
     f'-s{args.signature}',
     shifted_ps_file,
     shifted_ps_signatures_file,
])

# Put two pages on each sheet
run(['psnup',
     f'--paper={output_paper}',
     f'--inpaper={page_width}x{page_height}',
     '-2',
     shifted_ps_signatures_file,
     shifted_ps_signatures_2up_file,
])

# Rotate every other page upside-down for long-edge duplex printing
# Note: recto and verso pages look unaligned in PostScript (by about 0.5pt);
# BUT the alignment is restored by conversion back to PDF.
if args.short_edge:
    verso_rotation = '(0,0)'
else:
    verso_rotation = 'U(1w,1h)'
run(['pstops',
     f'--paper={output_paper}',
     f'2:0({verso_w_offset},{verso_h_offset}),1{verso_rotation}',
     shifted_ps_signatures_2up_file,
     shifted_ps_signatures_duplex_file,
])

# Convert back to PDF
run(['ps2pdf',
     '-dAutoRotatePages=/None',
     shifted_ps_signatures_duplex_file,
     args.output_file
])

if not args.debug:
    shutil.rmtree(tempdir)
